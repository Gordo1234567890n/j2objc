// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package protos;

option features.repeated_field_encoding = EXPANDED;
option features.utf8_validation = NONE;
option java_package = "protos";
option java_multiple_files = true;

message TypicalData {
  int32 my_int = 1;
  bytes my_bytes = 2;

  enum EnumType {
    option features.enum_type = CLOSED;

    VALUE1 = 1;
    VALUE2 = 2;
    VALUE3 = 3;
    VALUE4 = 4;
    VALUE9 = 9;
  }

  EnumType my_enum_type = 3;
  repeated int32 repeated_int32 = 4;
  repeated bool repeated_bool = 5;
  repeated float repeated_float = 6;
  repeated double repeated_double = 7;
  repeated string repeated_string = 8;
  repeated bytes repeated_bytes = 9;
  repeated EnumType repeated_enum = 10;
  TypicalDataMessage my_message = 11;
  bool my_bool = 12;
  float my_float = 13;
  double my_double = 14;
  string my_string = 15;
  uint32 my_uint = 16;
  int64 my_long = 17;
  uint64 my_ulong = 18;
  repeated int64 repeated_int64 = 19;
  repeated uint32 repeated_uint32 = 20;
  repeated uint64 repeated_uint64 = 21;
  repeated TypicalDataMessage repeated_message = 22;

  extensions 1000 to max;
}

message TypicalDataSet {
  repeated TypicalData repeated_typical_data = 1;
}

message TypicalDataMessage {
  int32 my_message_int = 1;
}

extend TypicalData {
  TypicalDataMessage my_extension = 1000;
  int32 my_primitive_extension = 1001;
  repeated int32 my_repeated_primitive_extension = 1002;
  repeated TypicalDataMessage my_repeated_extension = 1003;
  TypicalData.EnumType my_enum_extension = 1004;
  bytes my_bytes_extension = 1005;
  bool my_bool_extension = 1006;
  MsgWithDefaults my_extension_with_defaults = 1007;
}

message MsgWithDefaults {
  int32 my_int32 = 1 [
    default = 13
  ];

  bool my_bool = 2 [
    default = true
  ];

  string my_string = 3 [
    default = "foo"
  ];

  TypicalData.EnumType my_enum = 4 [
    default = VALUE4
  ];
}

message MsgWithRequiredFields {
  int32 required_int32 = 1 [
    features.field_presence = LEGACY_REQUIRED
  ];
}

message MsgWithSpecialFieldNames {
  int32 id = 1;
  double and_eq = 2;
  string zone = 3;
  repeated int32 self = 4;
}

message MsgWithNestedExtensions {
  extend TypicalData {
    int32 int_ext = 2000;
  }
}
